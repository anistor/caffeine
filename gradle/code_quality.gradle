/**
 * Configurations for code quality analysis
 */
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'one.util.huntbugs'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'pmd'

configurations {
  checkstyleConfig
}

dependencies {
  checkstyleConfig gradle_plugins.checkstyle
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-Xlint:all'
  // do not let errorprone plugin fail the build
  options.compilerArgs << '-XepAllErrorsAsWarnings'
}

javadoc.options.links(
  'http://docs.oracle.com/javase/8/docs/api/',
  'http://typesafehub.github.com/config/latest/api/',
  "http://google.github.io/guava/releases/${versions.guava}/api/docs/")

checkstyle {
  showViolations = true
  toolVersion = plugin_versions.checkstyle
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}

huntbugs {
  classSimpleFilter { classname ->
    !classname.contains('Header') && !classname.contains('Mpsc') && !classname.contains('Factory')
  }
}

findbugs {
  effort = 'max'
  excludeFilter = file("${rootDir}/config/findbugs/exclude.xml")
}

pmd {
  ruleSets = []
  toolVersion = plugin_versions.pmd
  ruleSetConfig = resources.text.fromFile(file("${rootDir}/config/pmd/rulesSets.xml"))
}

jacoco {
  toolVersion = plugin_versions.jacoco
}

jacocoTestReport {
  group = 'Coverage reports'
  description = 'Generates a test coverage report for a project'

  reports {
    xml.enabled = true
    html.enabled = true
  }
}

tasks.withType(Test) {
  if (System.properties.containsKey('debug')) {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
  options {
    jvmArgs '-XX:SoftRefLRUPolicyMSPerMB=0', '-XX:+UseParallelGC', '-noverify'
  }
  if (System.env.'CI') {
    maxHeapSize = '512m'
    reports.html.enabled = false
  }
  testLogging {
    events 'skipped', 'failed'
    exceptionFormat 'full'
    showCauses = true
    showExceptions = true
    showStackTraces = true
  }
}

tasks.withType(Checkstyle) {
  enabled = System.properties.containsKey('checkstyle')
  group = 'Checkstyle'
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

tasks.withType(FindBugs) {
  enabled = System.properties.containsKey('findbugs')
  group = 'Findbugs'
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

tasks.withType(Pmd) {
  enabled = System.properties.containsKey('pmd')
  group = 'PMD'
  reports {
    xml.enabled = false
    html.enabled = true
  }
}
